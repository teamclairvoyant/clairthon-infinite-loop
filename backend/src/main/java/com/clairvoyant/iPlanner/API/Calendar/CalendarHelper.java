package com.clairvoyant.iPlanner.API.Calendar;

import com.clairvoyant.iPlanner.Utility.Utility;
import com.google.api.client.util.DateTime;
import com.google.api.services.calendar.Calendar;
import com.google.api.services.calendar.model.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class CalendarHelper {

    private static final Logger logger = LoggerFactory.getLogger(CalendarHelper.class);

    public static List<Event> getEvents(String email, DateTime startTime, DateTime endTime) throws IOException, GeneralSecurityException {
        Calendar calendarClient = GoogleCredentialHelper.getCalendarClient();
        // Retrieve all events
        Events events = calendarClient.events().list(email)
                .setSingleEvents(true) // add recurring events too
                .setTimeMin(startTime)
                .setTimeMax(endTime)
                .setTimeZone("IST")
                .execute();
        return events.getItems();
    }

    public static String getPhotoUrl(String email) {
        // todo getPhotoUrl
        return "";
    }

    public static FreeBusyResponse getFreeBusy(List<String> email_list, DateTime startTime, DateTime endTime) throws IOException, GeneralSecurityException {
        Calendar calendarClient = GoogleCredentialHelper.getCalendarClient();
        FreeBusyRequest req = new FreeBusyRequest();
        req.setTimeZone("IST");
        req.setTimeMin(startTime);
        req.setTimeMax(endTime);

        List<FreeBusyRequestItem> items = new ArrayList<>();
        email_list.forEach(email -> items.add(new FreeBusyRequestItem().setId(email)));
        req.setItems(items);

        Calendar.Freebusy.Query fbq = calendarClient.freebusy().query(req);
        return fbq.execute();
    }

    public static Event createEvent(String eventTitle, DateTime startTime, DateTime endTime, String description, List<String> attendees_email) throws GeneralSecurityException, IOException {
        Calendar calendarClient = GoogleCredentialHelper.getCalendarClient();

        Event event = new Event();

        event.setSummary(eventTitle);
        event.setStart(new EventDateTime().setDateTime(startTime));
        event.setEnd(new EventDateTime().setDateTime(endTime));
        event.setDescription(description);

        // set google meet link
        ConferenceSolutionKey conferenceSKey = new ConferenceSolutionKey();
        conferenceSKey.setType("hangoutsMeet"); // Non-G suite user
        CreateConferenceRequest createConferenceReq = new CreateConferenceRequest();
        createConferenceReq.setRequestId(Utility.UUID()); // ID generated by you
        createConferenceReq.setConferenceSolutionKey(conferenceSKey);
        ConferenceData conferenceData = new ConferenceData();
        conferenceData.setCreateRequest(createConferenceReq);
        event.setConferenceData(conferenceData); // attach the meeting to your event

        // set attendees / participants
        List<EventAttendee> attendees = new ArrayList<>();
        attendees_email.forEach(email -> {
            EventAttendee attendee = new EventAttendee();
            attendee.setEmail(email);
            attendees.add(attendee);
        });
        event.setAttendees(attendees);

        // set Reminders 10 minutes before
        EventReminder[] reminderOverrides = new EventReminder[]{
                new EventReminder().setMethod("email").setMinutes(24 * 60),
                new EventReminder().setMethod("popup").setMinutes(10),
        };

        // set recurrence / repetitions
        // String[] recurrence = new String[] {"RRULE:FREQ=DAILY;COUNT=1"};
        // event.setRecurrence(Arrays.asList(recurrence));

        Event.Reminders reminders = new Event.Reminders()
                .setUseDefault(false)
                .setOverrides(Arrays.asList(reminderOverrides));
        event.setReminders(reminders);


        // set default configurations
        event.setVisibility("public");
        event.setTransparency("opaque");
        event.setGuestsCanInviteOthers(true);
        event.setGuestsCanModify(true);
        event.setGuestsCanInviteOthers(true);

        return calendarClient.events().insert("primary", event).setConferenceDataVersion(1).execute();
    }
}
